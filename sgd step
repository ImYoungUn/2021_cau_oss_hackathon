{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "hackathon_team1의 사본",
      "provenance": [],
      "collapsed_sections": [
        "1AosAX9DXOlc"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "863ad462a0d342bfae622404eed52570": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_611359d1279646f4b866bf24c5c7e3a3",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_18201dc360084795b88f6e8a39e2f30d",
              "IPY_MODEL_bb80186450d54cb697918b560025bd8c",
              "IPY_MODEL_55fba083b2fd46d7b72f3ded39a5297d"
            ]
          }
        },
        "611359d1279646f4b866bf24c5c7e3a3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "18201dc360084795b88f6e8a39e2f30d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_880b06688a4642cc9af7cbfc79d3ebd8",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": "Dl Completed...: 100%",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_53a9ca9dc8e345649358e97ccb8a1fa5"
          }
        },
        "bb80186450d54cb697918b560025bd8c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_3c2706e470de47549621abfb44d3b66d",
            "_dom_classes": [],
            "description": "",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 1,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_809d22ca020b4ac39f988f9454fcf765"
          }
        },
        "55fba083b2fd46d7b72f3ded39a5297d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_076a0d4df2db4052af516120c41a1f37",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 2/2 [00:00&lt;00:00,  2.28 url/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_273dc0b0587b49b5af3afdda48d2cdda"
          }
        },
        "880b06688a4642cc9af7cbfc79d3ebd8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "53a9ca9dc8e345649358e97ccb8a1fa5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "3c2706e470de47549621abfb44d3b66d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "809d22ca020b4ac39f988f9454fcf765": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": "20px",
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "076a0d4df2db4052af516120c41a1f37": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "273dc0b0587b49b5af3afdda48d2cdda": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "21e73705a8284f65847511aaa5b16d00": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_a4493022024f44d590231137e10455f0",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_f4e015db9c5d47568ad4dbcc6990fbd3",
              "IPY_MODEL_394f9529d1d34db696201a82d0c66151",
              "IPY_MODEL_631397f014d04de0b3c8a14c76794115"
            ]
          }
        },
        "a4493022024f44d590231137e10455f0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f4e015db9c5d47568ad4dbcc6990fbd3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_d97a23a3282b4cf08b33b4e195ab1c6a",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": "Dl Size...: 100%",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_03405091a24546d5810aa479f39c6625"
          }
        },
        "394f9529d1d34db696201a82d0c66151": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_ff29a0a5bc5b4145b5c00f26409b8150",
            "_dom_classes": [],
            "description": "",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 1,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_10406e5b03f2412688bfd0774792d2f1"
          }
        },
        "631397f014d04de0b3c8a14c76794115": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_dfdab1718c064449aa1545a7cf98eb7c",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 5/5 [00:00&lt;00:00,  1.19 MiB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5cde163173c84becb07278bde74e0801"
          }
        },
        "d97a23a3282b4cf08b33b4e195ab1c6a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "03405091a24546d5810aa479f39c6625": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "ff29a0a5bc5b4145b5c00f26409b8150": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "10406e5b03f2412688bfd0774792d2f1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": "20px",
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "dfdab1718c064449aa1545a7cf98eb7c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5cde163173c84becb07278bde74e0801": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0d489d3f5b1d43fd954b45b31cdd4bbc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_9391de9e28d44e7384c6f3b8fb289181",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_9273d20daadc41de8f0e14d1fb6b0003",
              "IPY_MODEL_6d6ec36ca1cf4c85bb87a0287d82abd9",
              "IPY_MODEL_cf0cf62f2b614486b03aca6613ed49e4"
            ]
          }
        },
        "9391de9e28d44e7384c6f3b8fb289181": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9273d20daadc41de8f0e14d1fb6b0003": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_7e537352653f4234ae6c34c9769dab43",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": "",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_e42b4e53dc3c421dadf98babad004e38"
          }
        },
        "6d6ec36ca1cf4c85bb87a0287d82abd9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_c5272d5b6f4148f9939d86542b66ac45",
            "_dom_classes": [],
            "description": "",
            "_model_name": "FloatProgressModel",
            "bar_style": "info",
            "max": 1,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_e339e885c6c04876a346cf4bfd56eebc"
          }
        },
        "cf0cf62f2b614486b03aca6613ed49e4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_79fb161c90af456b8e351e853f9e3f82",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 1887/0 [00:07&lt;00:00, 1208.62 examples/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_87cb922ea9a643eabb549a056ca1b279"
          }
        },
        "7e537352653f4234ae6c34c9769dab43": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "e42b4e53dc3c421dadf98babad004e38": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c5272d5b6f4148f9939d86542b66ac45": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "e339e885c6c04876a346cf4bfd56eebc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": "20px",
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "79fb161c90af456b8e351e853f9e3f82": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "87cb922ea9a643eabb549a056ca1b279": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "fcf2c8502b6b4e7fb595462530296653": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_d4b3673e003348c3921e1e346b4d4962",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_0e2f5177ce6f4da99dbc9fbc054059da",
              "IPY_MODEL_e40f5844fb4c4ad0be5993b9880285f0",
              "IPY_MODEL_d3c5b5d2b49041129b0edaeef86a99bb"
            ]
          }
        },
        "d4b3673e003348c3921e1e346b4d4962": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0e2f5177ce6f4da99dbc9fbc054059da": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_a8c34942c5504ee083bd973a47c25196",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": "100%",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_378046482622406ab240ab744684217e"
          }
        },
        "e40f5844fb4c4ad0be5993b9880285f0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_d23a4bdb0aae44b1bab3b031bb7a85c9",
            "_dom_classes": [],
            "description": "",
            "_model_name": "FloatProgressModel",
            "bar_style": "danger",
            "max": 2000,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1999,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_9c8e96ad2d8a455887e6295a6a5c63cd"
          }
        },
        "d3c5b5d2b49041129b0edaeef86a99bb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_7dffe2977ff94124bc6c8fd7a5d21d58",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 1999/2000 [00:00&lt;00:00, 39755.02 examples/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_33f8a6ffd7064b378f7f62f550933ea3"
          }
        },
        "a8c34942c5504ee083bd973a47c25196": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "378046482622406ab240ab744684217e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d23a4bdb0aae44b1bab3b031bb7a85c9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "9c8e96ad2d8a455887e6295a6a5c63cd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "7dffe2977ff94124bc6c8fd7a5d21d58": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "33f8a6ffd7064b378f7f62f550933ea3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ImYoungUn/2021_cau_oss_hackathon/blob/main/sgd%20step\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1AosAX9DXOlc"
      },
      "source": [
        "# **0. 해커톤 진행 주의사항**\n",
        "\n",
        "**1)  개발 관련 주의사항**\n",
        "*   [1. 초기 환경 설정]은 절대 수정하지 말 것\n",
        "*   모든 구현은 [2. 데이터 전처리] 및 [3.모델 생성]에서만 진행\n",
        "*   [4. 모델 저장]에서 team_name 변수 변경 (예.`team_name = 'team01'`)\n",
        " *    트레이닝 중간에 checkpoint를 활용하여 모델을 저장한 경우에도 파일 이름 양식 통일 필수\n",
        "*   Colab 사용중 실수로 데이터 손실이 발생할 수도 있으니 중간 결과값을 github에 업로드 \n",
        " *    \"런타임->모든 런타임 재설정\"은 절대 누르지 말 것 (저장한 모델 데이터가 모두 삭제됨)\n",
        "*   효율적인 구현 및 테스팅을 위해 GPU 가속 기능 활성화\n",
        " *    \"런타임 -> 런타임 유형변경 -> 하드웨어 가속기 -> GPU 설정\"\n",
        "*   주석을 최대한 자세히 작성\n",
        "*   Keras API 관련하여 [Keras Documentation](https://keras.io/) 참조\n",
        "\n",
        "**2) 제출 관련 주의사항**\n",
        "*  제출물\n",
        " *  소스코드 (hackathon_teamXX.ipynb)\n",
        " *  컴파일된 모델 파일 (model_entire_teamXX.h5)\n",
        " *  모델 발표 자료 \n",
        "* 제출 기한: **오후 6시 (단, 발표자료는 12시)**\n",
        "* 제출 방법: [GitHub README](https://github.com/cauosshackathonta/2021_cau_oss_hackathon/) 참조\n",
        "\n",
        " \n",
        "**3) 평가 관련 주의사항**\n",
        "*  모델 성능 = 두개의 테스트 데이터 셋 분류 정확도에 대한 weighted sum\n",
        " *  model.evaluate(x_test1, y_test1) + model.evaluate(x_test2, y_test2) * 2\n",
        "*  제출된 모델들의 테스트 데이터 셋 분류 정확도를 기준으로 수상작 결정\n",
        "*  수상 후보들에 대해서는 소스코드를 기반으로 모델 재검증 \n",
        " \n",
        "**4) 수상 실격 사유**\n",
        "*  유사한 소스코드 or 알고리즘이 적발될 경우\n",
        "*  소스코드와 제출된 모델이 상이한 경우\n",
        "*  개발 관련 주의사항을 지키지 않은 경우\n",
        " *  예: [초기 환경 설정]을 수정한 경우\n",
        "*  데이터 셋을 변조한 경우\n",
        " *  예: 테스트 데이터 셋을 트레이닝 데이터 셋에 포함하여 모델 생성\n",
        " *  단, tensorflow.data 및 dataset API를 사용하기 위해 변경하는 것은 허용. 이 경우, model evaluation 파트도 해당 API를 쓰도록 변경  \n",
        "*  주석이 소스코드와 맞지 않거나 미비할 경우\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "67lwEXhUqys1"
      },
      "source": [
        "# **1. 초기 환경 설정**\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ms5PBBJ1qSC6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 403,
          "referenced_widgets": [
            "863ad462a0d342bfae622404eed52570",
            "611359d1279646f4b866bf24c5c7e3a3",
            "18201dc360084795b88f6e8a39e2f30d",
            "bb80186450d54cb697918b560025bd8c",
            "55fba083b2fd46d7b72f3ded39a5297d",
            "880b06688a4642cc9af7cbfc79d3ebd8",
            "53a9ca9dc8e345649358e97ccb8a1fa5",
            "3c2706e470de47549621abfb44d3b66d",
            "809d22ca020b4ac39f988f9454fcf765",
            "076a0d4df2db4052af516120c41a1f37",
            "273dc0b0587b49b5af3afdda48d2cdda",
            "21e73705a8284f65847511aaa5b16d00",
            "a4493022024f44d590231137e10455f0",
            "f4e015db9c5d47568ad4dbcc6990fbd3",
            "394f9529d1d34db696201a82d0c66151",
            "631397f014d04de0b3c8a14c76794115",
            "d97a23a3282b4cf08b33b4e195ab1c6a",
            "03405091a24546d5810aa479f39c6625",
            "ff29a0a5bc5b4145b5c00f26409b8150",
            "10406e5b03f2412688bfd0774792d2f1",
            "dfdab1718c064449aa1545a7cf98eb7c",
            "5cde163173c84becb07278bde74e0801",
            "0d489d3f5b1d43fd954b45b31cdd4bbc",
            "9391de9e28d44e7384c6f3b8fb289181",
            "9273d20daadc41de8f0e14d1fb6b0003",
            "6d6ec36ca1cf4c85bb87a0287d82abd9",
            "cf0cf62f2b614486b03aca6613ed49e4",
            "7e537352653f4234ae6c34c9769dab43",
            "e42b4e53dc3c421dadf98babad004e38",
            "c5272d5b6f4148f9939d86542b66ac45",
            "e339e885c6c04876a346cf4bfd56eebc",
            "79fb161c90af456b8e351e853f9e3f82",
            "87cb922ea9a643eabb549a056ca1b279",
            "fcf2c8502b6b4e7fb595462530296653",
            "d4b3673e003348c3921e1e346b4d4962",
            "0e2f5177ce6f4da99dbc9fbc054059da",
            "e40f5844fb4c4ad0be5993b9880285f0",
            "d3c5b5d2b49041129b0edaeef86a99bb",
            "a8c34942c5504ee083bd973a47c25196",
            "378046482622406ab240ab744684217e",
            "d23a4bdb0aae44b1bab3b031bb7a85c9",
            "9c8e96ad2d8a455887e6295a6a5c63cd",
            "7dffe2977ff94124bc6c8fd7a5d21d58",
            "33f8a6ffd7064b378f7f62f550933ea3"
          ]
        },
        "outputId": "12339c7d-7f76-4099-fc91-21b13a9beffd"
      },
      "source": [
        "# tensorflow와 tf.keras 및 관련 라이브러리 임포트\n",
        "import tensorflow as tf\n",
        "import tensorflow_datasets as tfds\n",
        "from tensorflow import keras\n",
        "from keras.utils import np_utils\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# 데이터셋 로드 (Training dataset: CIFAR10, test dataset: CIFAR10 & CIFAR10의 변형)\n",
        "(x_train, y_train), (x_test1, y_test1) = keras.datasets.cifar10.load_data()\n",
        "\n",
        "test_ds2 = tfds.load('cifar10_1/v6', split='test', shuffle_files=False, batch_size=-1)\n",
        "test_ds2 = tfds.as_numpy(test_ds2)\n",
        "x_test2, y_test2 = test_ds2['image'], test_ds2['label']\n",
        "\n",
        "#분류를 위해 클래스 벡터를 바이너리 매트릭스로 변환\n",
        "y_train = np_utils.to_categorical(y_train)\n",
        "y_test1 = np_utils.to_categorical(y_test1)\n",
        "y_test2 = np_utils.to_categorical(y_test2)\n",
        "\n",
        "# 총 클래스 개수\n",
        "num_classes = y_train.shape[1]\n",
        "input_shape = x_train.shape[1:]\n",
        "print(x_train.shape, y_train.shape, x_test1.shape, y_test1.shape, x_test2.shape, y_test2.shape)"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n",
            "170500096/170498071 [==============================] - 4s 0us/step\n",
            "170508288/170498071 [==============================] - 4s 0us/step\n",
            "\u001b[1mDownloading and preparing dataset cifar10_1/v6/1.1.0 (download: 5.87 MiB, generated: 4.40 MiB, total: 10.27 MiB) to /root/tensorflow_datasets/cifar10_1/v6/1.1.0...\u001b[0m\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "863ad462a0d342bfae622404eed52570",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "Dl Completed...: 0 url [00:00, ? url/s]"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "21e73705a8284f65847511aaa5b16d00",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "Dl Size...: 0 MiB [00:00, ? MiB/s]"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "0d489d3f5b1d43fd954b45b31cdd4bbc",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "0 examples [00:00, ? examples/s]"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "text": [
            "Shuffling and writing examples to /root/tensorflow_datasets/cifar10_1/v6/1.1.0.incompleteX740K8/cifar10_1-test.tfrecord\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "fcf2c8502b6b4e7fb595462530296653",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "  0%|          | 0/2000 [00:00<?, ? examples/s]"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[1mDataset cifar10_1 downloaded and prepared to /root/tensorflow_datasets/cifar10_1/v6/1.1.0. Subsequent calls will reuse this data.\u001b[0m\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow_datasets/core/dataset_builder.py:598: get_single_element (from tensorflow.python.data.experimental.ops.get_single_element) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use `tf.data.Dataset.get_single_element()`.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow_datasets/core/dataset_builder.py:598: get_single_element (from tensorflow.python.data.experimental.ops.get_single_element) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use `tf.data.Dataset.get_single_element()`.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "(50000, 32, 32, 3) (50000, 10) (10000, 32, 32, 3) (10000, 10) (2000, 32, 32, 3) (2000, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A-YjppJpXBO9"
      },
      "source": [
        "# **2. 데이터 전처리**\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I6_QXBV6e-nC"
      },
      "source": [
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "import numpy as np\n",
        "# 데이터 전처리 (예: normalization)\n",
        "# 원본 데이터와 전처리 후 데이터를 구분하기 위해, 변수명 x_train_after, x_test1_after, x_test2_after를 변경하지 말 것\n",
        "x_train_after = x_train / 255.0\n",
        "x_test1_after = x_test1 / 255.0\n",
        "x_test2_after = x_test2 / 255.0\n",
        "\n",
        "\n"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fls8ER8SftvO"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QZ9KWTBP6AI1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "88a2275c-1924-4790-9fd0-0a7b509abcc9"
      },
      "source": [
        "val_x = np.concatenate((x_test1_after, x_test2_after), axis = 0)\n",
        "val_y = np.concatenate((y_test1, y_test2), axis = 0)\n",
        "print(x_test1_after.shape, val_x.shape)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(10000, 32, 32, 3) (12000, 32, 32, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v-lo-O1yiFpY"
      },
      "source": [
        "# **3. 모델 생성**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dMl0cUGXkWAg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fb25a728-aef7-4775-be6a-f64231dee499"
      },
      "source": [
        "!pip install --quiet vit-keras\n",
        "!pip install tensorflow-addons\n"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting tensorflow-addons\n",
            "  Downloading tensorflow_addons-0.14.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.1 MB)\n",
            "\u001b[?25l\r\u001b[K     |▎                               | 10 kB 41.3 MB/s eta 0:00:01\r\u001b[K     |▋                               | 20 kB 23.9 MB/s eta 0:00:01\r\u001b[K     |▉                               | 30 kB 18.2 MB/s eta 0:00:01\r\u001b[K     |█▏                              | 40 kB 16.2 MB/s eta 0:00:01\r\u001b[K     |█▌                              | 51 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█▊                              | 61 kB 8.3 MB/s eta 0:00:01\r\u001b[K     |██                              | 71 kB 7.9 MB/s eta 0:00:01\r\u001b[K     |██▍                             | 81 kB 8.8 MB/s eta 0:00:01\r\u001b[K     |██▋                             | 92 kB 9.5 MB/s eta 0:00:01\r\u001b[K     |███                             | 102 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███▎                            | 112 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███▌                            | 122 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███▉                            | 133 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████▏                           | 143 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████▍                           | 153 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████▊                           | 163 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████                           | 174 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 184 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████▋                          | 194 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████                          | 204 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████▏                         | 215 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████▌                         | 225 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 235 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████                         | 245 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████▍                        | 256 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████▊                        | 266 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████                        | 276 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 286 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████▋                       | 296 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████▉                       | 307 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████▏                      | 317 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 327 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████▊                      | 337 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████                      | 348 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 358 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████▋                     | 368 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 378 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████▎                    | 389 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████▌                    | 399 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████▉                    | 409 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 419 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████▍                   | 430 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████▊                   | 440 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 450 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████▎                  | 460 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████▋                  | 471 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 481 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████▏                 | 491 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████▌                 | 501 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████▉                 | 512 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 522 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████▍                | 532 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████▊                | 542 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████                | 552 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████▎               | 563 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████▋               | 573 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████▉               | 583 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████▏              | 593 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████▌              | 604 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████▊              | 614 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████              | 624 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████▍             | 634 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████▋             | 645 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 655 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 665 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████▌            | 675 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████▉            | 686 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████▏           | 696 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 706 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 716 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 727 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▎          | 737 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▋          | 747 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 757 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▏         | 768 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▌         | 778 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▉         | 788 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 798 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▍        | 808 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▊        | 819 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 829 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 839 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▋       | 849 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▉       | 860 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▏      | 870 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 880 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▊      | 890 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████      | 901 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▎     | 911 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▋     | 921 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 931 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▏    | 942 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▌    | 952 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▉    | 962 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 972 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▍   | 983 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▊   | 993 kB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 1.0 MB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▎  | 1.0 MB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 1.0 MB 7.1 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▉  | 1.0 MB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▏ | 1.0 MB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▌ | 1.1 MB 7.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▊ | 1.1 MB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 1.1 MB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▍| 1.1 MB 7.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▋| 1.1 MB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 1.1 MB 7.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 1.1 MB 7.1 MB/s \n",
            "\u001b[?25hRequirement already satisfied: typeguard>=2.7 in /usr/local/lib/python3.7/dist-packages (from tensorflow-addons) (2.7.1)\n",
            "Installing collected packages: tensorflow-addons\n",
            "Successfully installed tensorflow-addons-0.14.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v3rVRBsLfIOj",
        "outputId": "03b1d66d-374a-442e-8247-59c3fe657174"
      },
      "source": [
        "import tensorflow_addons as tfa\n",
        "from vit_keras import vit\n",
        "vit_model = vit.vit_b32(\n",
        "        image_size = (32, 32),\n",
        "        activation = 'softmax',\n",
        "        pretrained = True,\n",
        "        include_top = True,\n",
        "        pretrained_top = True,\n",
        "        classes = num_classes)\n",
        "model = tf.keras.Sequential([\n",
        "        vit_model,\n",
        "        tf.keras.layers.Flatten(),\n",
        "        tf.keras.layers.BatchNormalization(),\n",
        "        tf.keras.layers.Dense(30, activation = tfa.activations.gelu),\n",
        "        tf.keras.layers.BatchNormalization(),\n",
        "        tf.keras.layers.Dense(num_classes, 'softmax')\n",
        "    ],\n",
        "    name = 'vision_transformer')\n",
        "\n",
        "model.summary()"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/vit_keras/vit.py:141: UserWarning: Can only use pretrained_top with imagenet21k+imagenet2012 if classes = 1000. Setting manually.\n",
            "  UserWarning,\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://github.com/faustomorales/vit-keras/releases/download/dl/ViT-B_32_imagenet21k+imagenet2012.npz\n",
            "353255424/353253686 [==============================] - 9s 0us/step\n",
            "353263616/353253686 [==============================] - 9s 0us/step\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/vit_keras/utils.py:83: UserWarning: Resizing position embeddings from 12, 12 to 1, 1\n",
            "  UserWarning,\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Model: \"vision_transformer\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "vit-b32 (Functional)         (None, 1000)              88187368  \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 1000)              0         \n",
            "_________________________________________________________________\n",
            "batch_normalization (BatchNo (None, 1000)              4000      \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 30)                30030     \n",
            "_________________________________________________________________\n",
            "batch_normalization_1 (Batch (None, 30)                120       \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 10)                310       \n",
            "=================================================================\n",
            "Total params: 88,221,828\n",
            "Trainable params: 88,219,768\n",
            "Non-trainable params: 2,060\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U_6rUavqnNnN",
        "outputId": "c915f190-8df3-4fe0-9b78-e715afdb5daf"
      },
      "source": [
        "step = tf.Variable(0, trainable=False)\n",
        "boundaries = [10000, 20000, 30000]\n",
        "values = [0.03, 0.01, 0.003, 0.001]\n",
        "learning_rate_fn = keras.optimizers.schedules.PiecewiseConstantDecay(boundaries, values)\n",
        "learning_rate = learning_rate_fn(step)\n",
        "\n",
        "optimizer = tf.keras.optimizers.SGD(\n",
        "    learning_rate=learning_rate, momentum=0.9, nesterov=False, name=\"SGD\")\n",
        "model.compile(optimizer = optimizer, \n",
        "              loss = tf.keras.losses.CategoricalCrossentropy(label_smoothing = 0.2), \n",
        "              metrics = ['accuracy'])\n",
        "\n",
        "batch_size = 512\n",
        "STEP_SIZE_TRAIN = x_train.shape[0] // batch_size\n",
        "STEP_SIZE_VALID = val_x.shape[0] // batch_size\n",
        "\n",
        "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor = 'val_accuracy',\n",
        "                                                 factor = 0.2,\n",
        "                                                 patience = 2,\n",
        "                                                 verbose = 1,\n",
        "                                                 min_delta = 1e-4,\n",
        "                                                 min_lr = 1e-6,\n",
        "                                                 mode = 'max')\n",
        "\n",
        "earlystopping = tf.keras.callbacks.EarlyStopping(monitor = 'val_accuracy',\n",
        "                                                 min_delta = 1e-4,\n",
        "                                                 patience = 5,\n",
        "                                                 mode = 'max',\n",
        "                                                 restore_best_weights = True,\n",
        "                                                 verbose = 1)\n",
        "\n",
        "checkpointer = tf.keras.callbacks.ModelCheckpoint(filepath = '/content/checkpoint_entire_best_augmentation.h5',\n",
        "                                                  monitor = 'val_accuracy', \n",
        "                                                  verbose = 1, \n",
        "                                                  save_best_only = True,\n",
        "                                                  save_weights_only = True,\n",
        "                                                  mode = 'max')\n",
        "\n",
        "callbacks = [checkpointer]\n",
        "\n",
        "hist = model.fit(x = x_train_after, y = y_train,\n",
        "          steps_per_epoch = STEP_SIZE_TRAIN,\n",
        "          validation_data = (val_x, val_y),\n",
        "          validation_steps = STEP_SIZE_VALID,\n",
        "          epochs = 30,\n",
        "          batch_size = batch_size, \n",
        "          shuffle = True,\n",
        "          callbacks = callbacks)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "97/97 [==============================] - 74s 321ms/step - loss: 2.3137 - accuracy: 0.1148 - val_loss: 2.3043 - val_accuracy: 0.0997\n",
            "\n",
            "Epoch 00001: val_accuracy improved from -inf to 0.09969, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 2/30\n",
            "97/97 [==============================] - 29s 300ms/step - loss: 2.1657 - accuracy: 0.2171 - val_loss: 2.2962 - val_accuracy: 0.1004\n",
            "\n",
            "Epoch 00002: val_accuracy improved from 0.09969 to 0.10037, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 3/30\n",
            "97/97 [==============================] - 29s 302ms/step - loss: 1.7963 - accuracy: 0.4661 - val_loss: 2.2727 - val_accuracy: 0.1040\n",
            "\n",
            "Epoch 00003: val_accuracy improved from 0.10037 to 0.10403, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 4/30\n",
            "97/97 [==============================] - 29s 304ms/step - loss: 1.6279 - accuracy: 0.5767 - val_loss: 2.2027 - val_accuracy: 0.3297\n",
            "\n",
            "Epoch 00004: val_accuracy improved from 0.10403 to 0.32974, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 5/30\n",
            "97/97 [==============================] - 30s 305ms/step - loss: 1.5470 - accuracy: 0.6240 - val_loss: 2.0530 - val_accuracy: 0.5773\n",
            "\n",
            "Epoch 00005: val_accuracy improved from 0.32974 to 0.57728, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 6/30\n",
            "97/97 [==============================] - 30s 308ms/step - loss: 1.4944 - accuracy: 0.6564 - val_loss: 1.8074 - val_accuracy: 0.6133\n",
            "\n",
            "Epoch 00006: val_accuracy improved from 0.57728 to 0.61328, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 7/30\n",
            "97/97 [==============================] - 30s 309ms/step - loss: 1.4523 - accuracy: 0.6807 - val_loss: 1.5677 - val_accuracy: 0.6491\n",
            "\n",
            "Epoch 00007: val_accuracy improved from 0.61328 to 0.64912, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 8/30\n",
            "97/97 [==============================] - 30s 310ms/step - loss: 1.4162 - accuracy: 0.7015 - val_loss: 1.4738 - val_accuracy: 0.6664\n",
            "\n",
            "Epoch 00008: val_accuracy improved from 0.64912 to 0.66636, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 9/30\n",
            "97/97 [==============================] - 30s 310ms/step - loss: 1.3887 - accuracy: 0.7147 - val_loss: 1.5142 - val_accuracy: 0.6539\n",
            "\n",
            "Epoch 00009: val_accuracy did not improve from 0.66636\n",
            "Epoch 10/30\n",
            "97/97 [==============================] - 30s 311ms/step - loss: 1.3615 - accuracy: 0.7323 - val_loss: 1.4772 - val_accuracy: 0.6755\n",
            "\n",
            "Epoch 00010: val_accuracy improved from 0.66636 to 0.67553, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 11/30\n",
            "97/97 [==============================] - 30s 313ms/step - loss: 1.3361 - accuracy: 0.7462 - val_loss: 1.4777 - val_accuracy: 0.6788\n",
            "\n",
            "Epoch 00011: val_accuracy improved from 0.67553 to 0.67875, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 12/30\n",
            "97/97 [==============================] - 30s 312ms/step - loss: 1.3153 - accuracy: 0.7582 - val_loss: 1.4752 - val_accuracy: 0.6912\n",
            "\n",
            "Epoch 00012: val_accuracy improved from 0.67875 to 0.69115, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 13/30\n",
            "97/97 [==============================] - 30s 313ms/step - loss: 1.2893 - accuracy: 0.7733 - val_loss: 1.4908 - val_accuracy: 0.6869\n",
            "\n",
            "Epoch 00013: val_accuracy did not improve from 0.69115\n",
            "Epoch 14/30\n",
            "97/97 [==============================] - 30s 313ms/step - loss: 1.2740 - accuracy: 0.7804 - val_loss: 1.5013 - val_accuracy: 0.6912\n",
            "\n",
            "Epoch 00014: val_accuracy improved from 0.69115 to 0.69124, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 15/30\n",
            "97/97 [==============================] - 30s 314ms/step - loss: 1.2557 - accuracy: 0.7893 - val_loss: 1.4677 - val_accuracy: 0.6961\n",
            "\n",
            "Epoch 00015: val_accuracy improved from 0.69124 to 0.69608, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 16/30\n",
            "97/97 [==============================] - 30s 313ms/step - loss: 1.2328 - accuracy: 0.8021 - val_loss: 1.5002 - val_accuracy: 0.6937\n",
            "\n",
            "Epoch 00016: val_accuracy did not improve from 0.69608\n",
            "Epoch 17/30\n",
            "97/97 [==============================] - 30s 313ms/step - loss: 1.2172 - accuracy: 0.8119 - val_loss: 1.4588 - val_accuracy: 0.6990\n",
            "\n",
            "Epoch 00017: val_accuracy improved from 0.69608 to 0.69905, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 18/30\n",
            "97/97 [==============================] - 30s 314ms/step - loss: 1.1972 - accuracy: 0.8232 - val_loss: 1.4718 - val_accuracy: 0.6962\n",
            "\n",
            "Epoch 00018: val_accuracy did not improve from 0.69905\n",
            "Epoch 19/30\n",
            "97/97 [==============================] - 30s 314ms/step - loss: 1.1866 - accuracy: 0.8277 - val_loss: 1.4853 - val_accuracy: 0.6938\n",
            "\n",
            "Epoch 00019: val_accuracy did not improve from 0.69905\n",
            "Epoch 20/30\n",
            "97/97 [==============================] - 30s 314ms/step - loss: 1.1632 - accuracy: 0.8415 - val_loss: 1.5122 - val_accuracy: 0.6950\n",
            "\n",
            "Epoch 00020: val_accuracy did not improve from 0.69905\n",
            "Epoch 21/30\n",
            "97/97 [==============================] - 30s 314ms/step - loss: 1.1564 - accuracy: 0.8451 - val_loss: 1.4949 - val_accuracy: 0.7027\n",
            "\n",
            "Epoch 00021: val_accuracy improved from 0.69905 to 0.70270, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 22/30\n",
            "97/97 [==============================] - 30s 313ms/step - loss: 1.1397 - accuracy: 0.8548 - val_loss: 1.5049 - val_accuracy: 0.7016\n",
            "\n",
            "Epoch 00022: val_accuracy did not improve from 0.70270\n",
            "Epoch 23/30\n",
            "97/97 [==============================] - 30s 314ms/step - loss: 1.1236 - accuracy: 0.8628 - val_loss: 1.4935 - val_accuracy: 0.7002\n",
            "\n",
            "Epoch 00023: val_accuracy did not improve from 0.70270\n",
            "Epoch 24/30\n",
            "97/97 [==============================] - 30s 314ms/step - loss: 1.1148 - accuracy: 0.8675 - val_loss: 1.4926 - val_accuracy: 0.6962\n",
            "\n",
            "Epoch 00024: val_accuracy did not improve from 0.70270\n",
            "Epoch 25/30\n",
            "97/97 [==============================] - 30s 314ms/step - loss: 1.1013 - accuracy: 0.8747 - val_loss: 1.4771 - val_accuracy: 0.7036\n",
            "\n",
            "Epoch 00025: val_accuracy improved from 0.70270 to 0.70363, saving model to /content/checkpoint_entire_best_augmentation.h5\n",
            "Epoch 26/30\n",
            "97/97 [==============================] - 30s 313ms/step - loss: 1.0874 - accuracy: 0.8834 - val_loss: 1.5142 - val_accuracy: 0.6950\n",
            "\n",
            "Epoch 00026: val_accuracy did not improve from 0.70363\n",
            "Epoch 27/30\n",
            "97/97 [==============================] - 30s 314ms/step - loss: 1.0838 - accuracy: 0.8847 - val_loss: 1.5270 - val_accuracy: 0.6948\n",
            "\n",
            "Epoch 00027: val_accuracy did not improve from 0.70363\n",
            "Epoch 28/30\n",
            "97/97 [==============================] - 30s 314ms/step - loss: 1.0717 - accuracy: 0.8909 - val_loss: 1.5246 - val_accuracy: 0.6996\n",
            "\n",
            "Epoch 00028: val_accuracy did not improve from 0.70363\n",
            "Epoch 29/30\n",
            "97/97 [==============================] - 30s 314ms/step - loss: 1.0574 - accuracy: 0.9002 - val_loss: 1.5020 - val_accuracy: 0.7025\n",
            "\n",
            "Epoch 00029: val_accuracy did not improve from 0.70363\n",
            "Epoch 30/30\n",
            "97/97 [==============================] - 30s 314ms/step - loss: 1.0462 - accuracy: 0.9055 - val_loss: 1.5180 - val_accuracy: 0.7004\n",
            "\n",
            "Epoch 00030: val_accuracy did not improve from 0.70363\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K_Nxq-ZbG9Sy",
        "outputId": "75b81752-8c8b-41bf-ea7b-d01374b6499d"
      },
      "source": [
        "print(val_x.shape, val_y.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(36864000,) (120000,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "axxy4U005Dqr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "cf88e2b5-65b0-4a23-af0a-1346d135c378"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig, loss_ax = plt.subplots()\n",
        "acc_ax = loss_ax.twinx()\n",
        "\n",
        "loss_ax.plot(hist.history['loss'], 'y', label='train loss')\n",
        "loss_ax.plot(hist.history['val_loss'], 'r', label='val loss')\n",
        "loss_ax.set_xlabel('epoch')\n",
        "loss_ax.set_ylabel('loss')\n",
        "loss_ax.legend(loc='upper left')\n",
        "\n",
        "acc_ax.plot(hist.history['accuracy'], 'b', label='train acc')\n",
        "acc_ax.plot(hist.history['val_accuracy'], 'g', label='val acc')\n",
        "acc_ax.set_ylabel('accuracy')\n",
        "acc_ax.legend(loc='upper right')\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sN0sfiEu6tKS",
        "outputId": "9d858f8e-dd73-4c67-e375-619779d4e246"
      },
      "source": [
        "print(hist.history)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'loss': [0.9226301312446594, 0.9173082709312439], 'accuracy': [0.9765599966049194, 0.9793000221252441], 'val_loss': [1.861316442489624], 'val_accuracy': [0.5849999785423279], 'lr': [1e-04, 1e-04]}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QR9WUYXxqtfR"
      },
      "source": [
        "# **4. 모델 저장**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wi9yznz4qvzK"
      },
      "source": [
        "save_path = '/content/'\n",
        "team_name = 'team01'\n",
        "\n",
        "# 트레이닝된 전체 모델을 저장합니다.\n",
        "model.save(save_path +  'aug_model_entire_'+ team_name + '.h5')"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4aPbgI-c-Kj8"
      },
      "source": [
        "# **5. 모델 로드 및 평가**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y7WONVxH-Kt6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4bdf784b-25f2-4349-80d9-1807be659094"
      },
      "source": [
        "save_path = '/content/'\n",
        "team_name = 'team01'\n",
        "\n",
        "model = keras.models.load_model(save_path + 'aug_model_entire_' + team_name + '.h5')\n",
        "\n",
        "model.evaluate(x_test1_after, y_test1)\n",
        "model.evaluate(x_test2_after, y_test2)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "313/313 [==============================] - 13s 35ms/step - loss: 1.4686 - accuracy: 0.7217\n",
            "63/63 [==============================] - 2s 38ms/step - loss: 1.8045 - accuracy: 0.5775\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1.804516315460205, 0.5774999856948853]"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ywPxNTBr3y8H"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}